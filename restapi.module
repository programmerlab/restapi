<?php

use Drupal\restapi\Api;
use Drupal\restapi\JsonRequest;
use Drupal\restapi\JsonResponse;
use Negotiation\Negotiator;
use Psr\Http\Message\ResponseInterface;
use Drupal\restapi\ServerRequestFactory;
use Drupal\restapi\ResourceConfiguration;
use Drupal\restapi\ResourceConfigurationInterface;
use Drupal\restapi\Exception\ClassNotValidException;
use Drupal\restapi\Exception\AuthClassNotValidException;
use Drupal\restapi\Exception\RestApiException;
use Zend\Diactoros\Response\SapiEmitter;


/**
 * Implements hook_menu().
 *
 */
function restapi_menu() {

  $resources = restapi_get_resources(TRUE);
  $items = [];

  foreach($resources as $resource) {

    $items[$resource->getPath()] = [
      'page callback'     => 'restapi_page_callback',
      'page arguments'    => [$resource],
      'access callback'   => TRUE,
      'delivery callback' => 'restapi_delivery_callback',
      'type'              => MENU_CALLBACK,
    ];
  }

  $items['admin/config/services/restapi'] = [
    'title'            => 'RestAPI configuration',
    'description'      => 'Configuration settings for the Rest API',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => ['restapi_admin_form'],
    'access arguments' => ['administer site configuration'],
    'file'             => 'restapi.admin.inc',
  ];

  return $items;

}


/**
 * Implements hook_xautoload().
 *
 * @param $adapter
 *   The xautoload adapter.
 *
 */
function restapi_xautoload($adapter) {
  if (module_exists('composer_manager')) {
    $dir = composer_manager_vendor_dir() . '/composer';
    $adapter->absolute()->composerDir($dir);
  }

  if (is_dir(__DIR__ . '/vendor/composer')) {
    $adapter->composerDir('vendor/composer');
  }
}


/**
 * Implements hook_modules_enabled().
 *
 * @param array $modules
 *   An array of modules being enabled.
 *
 */
function restapi_modules_enabled($modules) {
  restapi_get_resources(TRUE);
}


/**
 * Implements hook_modules_disabled().
 *
 * @param array $modules
 *   An array of modules being disabled.
 *
 */
function restapi_modules_disabled($modules) {
  restapi_get_resources(TRUE);
}


/**
 * Implements hook_restapi_request().
 *
 * @param string $path
 *   The current API path being requested.
 * @param ResourceConfigurationInterface $resource
 *   The resource configuration.
 * @param JsonRequest $request
 *   The HTTP request.
 *
 * @return JsonRequest|NULL
 */
function restapi_restapi_request($path, ResourceConfigurationInterface $resource, JsonRequest $request) {

  $current_version = (int) variable_get('restapi_current_version', 1);
  $minimum_version = (int) variable_get('restapi_minimum_version', 0);

  if ($request->getVersion()) {
    if ($request->getVersion() > $current_version) {
      $message = t('You requested version @requested of the API, but the latest supported version is @supported.', [
        '@requested' => $request->getVersion(),
        '@supported' => $current_version,
      ]);
      throw new RestApiException($message, 400, NULL, 'invalid version');
    }
    if ($request->getVersion() < $minimum_version) {
      $message = t('You requested version @requested of the API, but the earliest supported version is @supported.', [
        '@requested' => $request->getVersion(),
        '@supported' => $minimum_version,
      ]);
      throw new RestApiException($message, 400, NULL, 'invalid version');
    }
  }

  if (variable_get('restapi_debug')) {
    timer_start('restapi-' . $path);
  }

}


/**
 * Implements hook_restapi_response().
 *
 * @param string $path
 *   The current API path being requested.
 * @param ResourceConfigurationInterface $resource
 *   The resource configuration.
 * @param JsonRequest $request
 *   The HTTP request.
 * @param ResponseInterface $response
 *   The HTTP response.
 *
 * @return ResponseInterface|NULL
 *
 */
function restapi_restapi_response($path, ResourceConfigurationInterface $resource, JsonRequest $request, ResponseInterface $response) {

  $api_name = str_replace(' ', '-', variable_get('restapi_api_name', 'API'));
  $method   = _restapi_get_versioned_method($resource, $request);

  if ($deprecation = $resource->getDeprecationForMethod($method)) {

    $dep_parts = ['yes'];
    $dep_parts[] = 'version=' . ($deprecation['version'] ?: variable_get('restapi_current_version', 1));

    if ($deprecation['reason']) {
      $dep_parts[] = 'reason=' . $deprecation['reason'];
    }

    $response = $response->withHeader('X-' . $api_name . '-Deprecated', implode('; ', $dep_parts));
  }

  $stability = $resource->getStabilityForMethod($method);
  $response  = $response->withHeader('X-' . $api_name . '-Stability', $stability);

  // Add debug headers.
  if (variable_get('restapi_debug')) {
    $timer    = timer_stop('restapi-' . $path);
    $response = $response->withHeader('X-Debug-Call-Time', $timer['time'] . 'ms');
  }

  // Add Allow header by checking to see if there's a versioned class method for
  // each possible HTTP verb.
  $possible_methods = ['DELETE', 'GET', 'POST', 'PUT', 'OPTIONS'];
  $allowed_methods = array_filter($possible_methods, function ($method) use ($request, $resource) {
    return _restapi_get_versioned_method($resource, $request->withMethod($method));
  });

  $response = $response->withHeader('Allow', implode(', ', $allowed_methods));

  return $response;
}


/**
 * Implements hook_restapi_exception().
 *
 * @param Exception $e
 *   The exception to inspect.
 * @param ResponseInterface $response
 *   The ResponseInterface, if a previous module has generated one already.
 *
 * @return ResponseInterface|NULL
 *
 */
function restapi_restapi_exception(Exception $e, ResponseInterface $response = NULL) {

  if ($e instanceof RestApiException) {
    $data = [
      'error'   => (string) $e,
      'message' => $e->getMessage(),
    ];
    $response = JsonResponse::create($data, $e->getCode());
  }

  return $response;
}


/**
 * Implements hook_theme_registry_alter().
 *
 * The maintenance page ends up being the output for the default error handler.
 * If we're in an AJAX context then we'll override that to ensure we're
 * returning JSON.
 *
 * Note that this hook will only be fired when the theme is actually called.
 * During an "expected" error as a result of the Drupal\restapi\Api class, this
 * will never be run.
 *
 * @param array $theme
 *   An array of theme definitions.
 *
 */
function restapi_theme_registry_alter(&$theme) {

  $request    = restapi_get_request();
  $negotiator = new Negotiator();
  $accept     = $request->getHeaderLine('Accept');

  if ($accept && $negotiator->getBest($accept, ['application/json'])) {
    $file = 'restapi.theme.inc';
    $path = drupal_get_path('module', 'restapi');

    $theme['maintenance_page']['function'] = 'theme_restapi_error';
    $theme['maintenance_page']['type'] = 'module';
    $theme['maintenance_page']['theme path'] = $path;
    $theme['maintenance_page']['file'] = $file;
    $theme['maintenance_page']['includes'] = [$path . '/' . $file];

    unset($theme['maintenance_page']['path']);
    unset($theme['maintenance_page']['template']);
  }

}


/**
 * Implements hook_watchdog_alter().
 *
 * WARNING: This hook is only run if Drupal core has been patched too allow for
 * modules to alter the watchdog call before it is processed. If the patch is
 * not applied, this function will never be called.
 *
 * @see patches/bootstrap.inc.patch
 *
 * @param array $log_entry
 *   An array of data for the message being logged.
 *
 */
function restapi_watchdog_alter(&$log_entry) {
  $request_id = restapi_get_request()->getRequestId();
  $log_entry['message'] = "Request ID: $request_id: " . $log_entry['message'];
}


/**
 * Page callback to handle an API call from the Drupal menu system.
 *
 * @param ResourceConfigurationInterface $resource
 *   The resource that is being accessed, as defined in restapi_get_resources().
 *
 * @return JsonResponse
 *
 */
function restapi_page_callback(ResourceConfigurationInterface $resource) {

  global $user;

  $request = restapi_get_request();
  $path    = current_path();
  $auth    = $resource->invokeAuthenticationService($user, $request);

  try {
    $account = $auth->authenticate();
  }
  catch (Exception $e) {
    $response = restapi_invoke_hook_exception($e);
    $response = restapi_invoke_hook_response($path, $resource, $request, $response);

    return $response;
  }

  if (!$account) {
    return MENU_ACCESS_DENIED;
  }

  $api = new Api($account, $request);

  return $api->call($request->getMethod(), $path);
}


/**
 * Delivery callback for API responses.
 *
 * @param mixed $response
 *   Generally, a ResponseInterface object, or an integer provided by the Drupal
 *   menu system.
 *
 */
function restapi_delivery_callback($response) {

  $request = restapi_get_request();

  // Clean up the stack of messages.
  drupal_get_messages();

  // The menu system may return one of these integers.
  if (is_int($response)) {
    switch ($response) {
      case MENU_NOT_FOUND:
        $error   = 'not_found';
        $status  = 404;
        $message = t('The resource "@resource" does not exist.', [
          '@resource' => current_path(),
        ]);
        break;

      // This request failed the access check in hook_menu(). For restapi
      // requests, this is assumed to be an authentication check.
      case MENU_ACCESS_DENIED:
        $error   = 'unauthenticated';
        $status  = 401;
        $message = t('Your credentials could not be verified.');
        break;

      case MENU_SITE_OFFLINE:
        $error   = 'unavailable';
        $status  = 503;
        $message = t('This resource is temporarily offline.');
        break;

      default:
        $error   = 'unknown';
        $status  = 500;
        $message = t('An unknown error occurred. Sorry.');
        break;
    }

    $response = JsonResponse::create([
      'error'   => $error,
      'message' => $message,
    ], $status);

  }
  elseif (!($response instanceof ResponseInterface)) {
    watchdog('restapi', '@id: The callback for the path "@path" returned an incorrect response. Expecting an instance of Response, or a Drupal constant (MENU_NOT_FOUND, MENU_ACCESS_DENIED, MENU_SITE_OFFLINE). Received response of type "@type"', [
      '@id'   => $request->getRequestId(),
      '@path' => current_path(),
      '@type' => gettype($response),
    ], WATCHDOG_ERROR);

    $response = JsonResponse::create([
      'error'   => 'unknown',
      'message' => t('This resource is not available.'),
    ], 503);
  }

  $current_version = (int) variable_get('restapi_current_version', 1);
  if ($request->getVersion()) {
    $version = $current_version > $request->getVersion() ? $request->getVersion() : $current_version;
  }
  else {
    $version = $current_version;
  }

  $version_name = str_replace(' ', '-', variable_get('restapi_api_name', 'API'));
  $version_header_name = 'X-' . $version_name . '-Version';

  $response = $response->withHeader('X-Request-Id', $request->getRequestId());
  $response = $response->withHeader($version_header_name, (string) $version);

  // For requests in the browser, we'll try to show the output in a more
  // pleasant way.
  $accept      = $request->getHeaderLine('Accept');
  // @see: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition
  $is_download = stripos($response->getHeaderLine('Content-Disposition'), 'attachment') !== FALSE;
  if ($accept && !$is_download) {

    $negotiator = new Negotiator();
    $priorities = ['application/json', 'text/html'];
    $best_type  = $negotiator->getBest($accept, $priorities);

    if ($best_type->getValue() === 'text/html') {
      restapi_deliver_html($response);
      return;
    }

  }

  (new SapiEmitter())->emit($response);

  module_invoke_all('exit');

}


/**
 * Delivers the JSON in a HTML wrapper, for easier browser viewing and
 * debugging.
 *
 * @param ResponseInterface $response
 *
 */
function restapi_deliver_html(ResponseInterface $response) {

  $response = $response->withHeader('Content-Type', 'text/html');
  $headers = $response->getHeaders();

  foreach($headers as $header => $values) {
    $value  = implode('; ', $values);
    $header = ucfirst($header);
    print "<strong>$header</strong>: $value<br />\n";
  }

  print "<pre>";

  // If we're sending HTML, we want to ensure that we're encoding any HTML
  // elements in the output. As well, we'll hyperlink URLs we find for
  // convenience.
  //
  // Regex based on https://gist.github.com/dperini/729294#comment-15527
  ob_start(function($output) {
    $output = stripslashes($output);
    $output = htmlspecialchars($output, ENT_NOQUOTES, 'UTF-8');
    $regex  = '_(?:(?:https?|ftp)://)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\x{00a1}-\x{ffff}0-9]+-?)*[a-z\x{00a1}-\x{ffff}0-9]+)(?:\.(?:[a-z\x{00a1}-\x{ffff}0-9]+-?)*[a-z\x{00a1}-\x{ffff}0-9]+)*(?:\.(?:[a-z\x{00a1}-\x{ffff}]{2,})))(?::\d{2,5})?(?:/[^"\s]*)?_iuS';
    $output = preg_replace($regex, '<a href="$0">$0</a>', $output);
    return $output;
  });

  (new SapiEmitter())->emit($response);

  ob_end_flush();

  print "</pre>";

  module_invoke_all('exit');

}


/**
 * Returns an object representing the current page request.
 *
 * @return JsonRequest
 *
 */
function restapi_get_request() {

  static $request = NULL;

  if (!$request) {
    $request = ServerRequestFactory::fromGlobals();
  }

  return $request;

}


/**
 * Returns a single resource, depending on the path provided.
 *
 * @param string $path
 *   The path for the resource to return.
 *
 * @return ResourceConfigurationInterface
 *   Returns a ResourceConfiguration object, or FALSE If the resource does not
 *   exist.
 *
 */
function restapi_get_resource($path) {

  $resources = restapi_get_resources();
  $resource  = NULL;

  foreach($resources as $resource) {
    if ($resource->matchesPath($path)) {
      return $resource;
    }
  }

  return FALSE;

}


/**
 * Returns all resources implemented by other modules.
 *
 * @param boolean $refresh
 *   Determines whether the cached copy (if it exists) of the resources should
 *   be ignored (default: FALSE).
 *
 * @return ResourceConfigurationInterface[]
 *
 */
function restapi_get_resources($refresh = FALSE) {

  if (!$refresh && $cache = cache_get('restapi_resources')) {
    return $cache->data;
  }

  $modules      = module_implements('restapi_resources');
  $items        = [];
  $default_auth = variable_get('restapi_default_auth_class') ?: 'Drupal\restapi\Auth\DrupalAuthenticationService';
  $url_prefix   = restapi_get_url_prefix();

  foreach($modules as $module) {

    $resources = module_invoke($module, 'restapi_resources');

    if (!is_array($resources)) {
      watchdog('restapi', 'hook_restapi_resources(), implemented in "@module", does not return an array.', [
        '@module' => $module,
      ], WATCHDOG_WARNING);
      continue;
    }

    foreach($resources as $path => $resource) {

      $class = isset($resource['class']) ? $resource['class'] : 'ClassNotDefined';
      $auth  = isset($resource['auth']) ? $resource['auth'] : $default_auth;
      $conf_class = isset($resource['config']) ? $resource['config'] : ResourceConfiguration::class;

      // Ensure our resource definitions are valid, and skip registering them
      // if they are not.
      try {
        $items[] = new $conf_class($path, $module, $class, $auth, $url_prefix);
      }
      catch (ClassNotValidException $e) {
        watchdog('restapi', 'The resource "@resource" in the module "@module" is not valid because the class "@class" does not exist.', [
          '@class'    => $class,
          '@resource' => $path,
          '@module'   => $module,
        ], WATCHDOG_WARNING);
        continue;
      }
      catch (AuthClassNotValidException $e) {
        watchdog('restapi', 'The resource "@resource" in the module "@module" is not valid because the authentication class "@auth" does not exist.', [
          '@auth'     => $auth,
          '@resource' => $path,
          '@module'   => $module,
        ], WATCHDOG_WARNING);
        continue;
      }
    }
  }

  cache_set('restapi_resources', $items);

  return $items;

}


/**
 * Helper function to make an internal request to a resource.
 *
 * Internal requests skip the HTTP overhead of the resource, and bypass the
 * authentication check. The resource may still implement an access check which
 * will be respected.
 *
 * Note that the method and data provided will override the method or data set
 * in the optional request object.
 *
 * @param string $method
 *   The HTTP method to call for the resource. This overrides the method set in
 *   the optional request object.
 * @param string $path
 *   The path representing the resource to call.
 * @param array $data
 *   An array of data to provide the resource. This overrides any data set in
 *   the optional request object.
 * @param array $headers
 *   An array of headers to provide the resource. This overrides any headers set
 *   in the optional request object.
 * @param \StdClass $user
 *   (Optional) The Drupal user to call this resource as. Defaults to the
 *   current user.
 * @param JsonRequest $request
 *   (Optional) The request to use to set the context for the resource. Defaults
 *   to the current request context.
 *
 * @return JsonResponse
 *
 */
function restapi_execute_resource($method, $path, array $data = [], array $headers = [], \StdClass $user = NULL, JsonRequest $request = NULL) {

  $path  = ltrim(trim($path), '/');
  $prefix = restapi_get_url_prefix();

  // If a URL prefix is set, and not included in the path, add it.
  if ($prefix && strpos($prefix, $path) !== 0) {
    $path = $prefix . '/' . $path;
  }

  $request = $request ?: restapi_get_request();
  $user    = $user ?: $GLOBALS['user'];
  $api     = new Api($user, $request);
  $headers = $headers ?: ['Accept' => 'application/json; version=' . variable_get('restapi_current_version', 1)];

  return $api->call($method, $path, $data, $headers);

}


/**
 * Helper function to return a sanitized restapi url prefix if one is set.
 *
 * @return mixed $response
 *   The sanitized restapi url prefix string if it is set, NULL if it is not.
 *
 */
function restapi_get_url_prefix() {
  // If a URL prefix is set, and not included in the path, add it.
  $prefix = variable_get('restapi_url_prefix');
  return rtrim(ltrim(trim($prefix), '/'), '/');
}


/**
 * Helper function to invoke hook_restapi_exception.
 *
 * @param Exception $e
 *   The exception that is being thrown.
 *
 * @return ResponseInterface|NULL
 *
 */
function restapi_invoke_hook_exception(Exception $e) {

  $response = NULL;

  foreach(module_implements('restapi_exception') as $module) {
    $func   = $module . '_restapi_exception';
    $result = $func($e, $response);

    if ($result instanceof ResponseInterface) {
      $response = $result;
    }
  }

  return $response;
}


/**
 * Helper function to invoke hook_restapi_response.
 *
 * @param string $path
 *   The path.
 * @param ResourceConfigurationInterface $resource
 *   The resource configuration.
 * @param JsonRequest $request
 *   The HTTP request.
 * @param ResponseInterface $response
 *   The HTTP response.
 *
 * @return ResponseInterface
 *
 */
function restapi_invoke_hook_response($path, ResourceConfigurationInterface $resource, JsonRequest $request, ResponseInterface $response) {

  foreach (module_implements('restapi_response') as $module) {
    $func   = $module . '_restapi_response';
    $result = $func($path, $resource, $request, $response);

    if ($result instanceof ResponseInterface) {
      $response = $result;
    }
  }

  return $response;
}


/**
 * Helper function to determine which method is available. The version will
 * decrement/cascade down from the specified version all the way down to a
 * non-versioned method.
 *
 * @param ResourceConfigurationInterface $resource
 *   The resource configuration.
 * @param JsonRequest $request
 *   The request being made.
 * @param string $method_override
 *   The method name that we are trying to call.
 *
 * @throws RestApiException
 *
 * @return string|NULL
 *   Returns the name of the method to call, if one can be found, or null if
 *   no method exists that can satisfy the request.
 *
 */
function _restapi_get_versioned_method(ResourceConfigurationInterface $resource, JsonRequest $request, $method_override = NULL) {

  $method          = $method_override ?: $request->getMethod();
  $current_version = (int) variable_get('restapi_current_version', 1);
  if ($request->getVersion()) {
    $version = $current_version > $request->getVersion() ? $request->getVersion() : $current_version;
  }
  else {
    watchdog('restapi', 'Accept header does not include a requested version, falling back to current version.', [], WATCHDOG_INFO);
    $version = $current_version;
  }

  for (; $version > 0; $version--) {
    $method_name = $method . 'V' . $version;

    if (method_exists($resource->getClass(), $method_name)) {
      return $method_name;
    }
  }

  return method_exists($resource->getClass(), $method) ? $method : NULL;
}
